-- MySQL dump 10.13  Distrib 8.0.21, for macos10.15 (x86_64)
--
-- Host: sahty.caqh8u6yma1j.ap-southeast-1.rds.amazonaws.com    Database: sahty
-- ------------------------------------------------------
-- Server version	8.0.20

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
SET @MYSQLDUMP_TEMP_LOG_BIN = @@SESSION.SQL_LOG_BIN;
SET @@SESSION.SQL_LOG_BIN= 0;

--
-- GTID state at the beginning of the backup 
--

SET @@GLOBAL.GTID_PURGED=/*!80000 '+'*/ '';

--
-- Table structure for table `blogs`
--

DROP TABLE IF EXISTS `blogs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `blogs` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `slug` varchar(255) DEFAULT NULL,
  `image` varchar(255) DEFAULT NULL,
  `content` text,
  `created_at` int unsigned DEFAULT NULL,
  `user_id` int DEFAULT NULL,
  `tags` text,
  PRIMARY KEY (`id`),
  KEY `user_write_blog_idx` (`user_id`),
  CONSTRAINT `user_write_blog` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=49 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blogs`
--

LOCK TABLES `blogs` WRITE;
/*!40000 ALTER TABLE `blogs` DISABLE KEYS */;
INSERT INTO `blogs` VALUES (32,'This is a test blog','Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum gravida turpis vitae pretium fermentum. Nulla enim metus, iaculis et elementum et, congue eget risus.','this-is-a-test-blog','https://miro.medium.com/max/1000/1*rgIzCLxOTszb_xekbJUGJQ.jpeg','I’m sure there are plenty of developers who stick to the basic global objects: numbers, strings, objects, arrays and booleans.For many use-cases, these are all you need. But if you want to make your code as fast and scalable as possible, these basic types aren’t always good enough. In this article, we’ll talk about how JavaScript’s Sets can make your code faster — especially as it scales. There is a significant amount of crossover between what an array can do and what a Set can do. But using Sets will often bring runtime benefits that are impossible to achieve with arrays. In this article, we’ll explore how.\n\nI’m sure there are plenty of developers who stick to the basic global objects: numbers, strings, objects, arrays and booleans.For many use-cases, these are all you need. But if you want to make your code as fast and scalable as possible, these basic types aren’t always good enough. In this article, we’ll talk about how JavaScript’s Sets can make your code faster — especially as it scales. There is a significant amount of crossover between what an array can do and what a Set can do. But using Sets will often bring runtime benefits that are impossible to achieve with arrays. In this article, we’ll explore how.\n\nI’m sure there are plenty of developers who stick to the basic global objects: numbers, strings, objects, arrays and booleans.For many use-cases, these are all you need. But if you want to make your code as fast and scalable as possible, these basic types aren’t always good enough. In this article, we’ll talk about how JavaScript’s Sets can make your code faster — especially as it scales. There is a significant amount of crossover between what an array can do and what a Set can do. But using Sets will often bring runtime benefits that are impossible to achieve with arrays. In this article, we’ll explore how.\n\nI’m sure there are plenty of developers who stick to the basic global objects: numbers, strings, objects, arrays and booleans.For many use-cases, these are all you need. But if you want to make your code as fast and scalable as possible, these basic types aren’t always good enough. In this article, we’ll talk about how JavaScript’s Sets can make your code faster — especially as it scales. There is a significant amount of crossover between what an array can do and what a Set can do. But using Sets will often bring runtime benefits that are impossible to achieve with arrays. In this article, we’ll explore how.',1599036703,1,',hoho,hehe,haha,hihi,'),(35,'3 JavaScript Performance Mistakes You Should Stop Doing','What if I told you everything you knew was a lie, what will happen if you learn some of the key features our beloved ECMAScript have published over the recent years, are actually dangerous performance traps, sugar coated in a slick looking one line callba','3-javascript-performance-mistakes-you-should-stop-doing','https://miro.medium.com/max/700/0*9ZI7OIRHE7ARhiuK','I still remember this day vividly, ES5 was released, and great new array functions were introduced to our dear JavaScript. Among them were forEach, reduce, map, filter — they made us feel the language is growing, getting more functional, writing code became more fun and smooth, and the result was easier to read and understand.\nAbout the same time, a new environment grew — Node.js, it gave us the ability to have a smooth transition from front-end to back-end while truly redefining full stack development.\nNowadays, Node.js, using the latest ECMAScript over V8, is trying to be considered as part of the major league server-side development languages, and as such, it needs to prove worthy in performance. Yes, there are so many parameters to be taken into account, and yes, there is no silver bullet language which is superior to all. But, is writing JavaScript using the out-of-the-box features provided like the mentioned above array function helping or harming your application performance?\nMoreover, client-side javascript is claiming to be a reasonable solution for more than just presentation\\view, as end-users computers grow stronger, and networks faster — but can we rely on this when our application requires blazing fast performance and might be a very large and complex one?\nTo test these questions, I tried comparing a few scenarios and drilled down to understand the results I got. I executed the following tests on Node.js v10.11.0 and in the Chrome browser, both on macOS.',1599128128,1,',javascript,js,mistakes,'),(36,'Optimizing React Performance','You’ve spent months, maybe even years, building an application for your organization. It looks great, has gone through a rigorous QA process, and has gotten good reactions from your beta testers.','optimizing-react-performance','https://miro.medium.com/max/700/0*amBPtwUBU3wfzCr0','Launch day comes; are you certain your application can stand up to unexpected demands, high messaging rates, or slow data connections?\nIn software development it’s easy to push addressing performance concerns towards the end of the process (maybe even when it’s too late). However, there are tools readily available to help you identify, and mitigate performance issues early on.\nAs our application began to grow we started noticing our animations drop lower than 60fps and visually poor mounting/rendering performance. Our application also contains a large chat feed with multiple channels to chat in. As the messages in each channel began to grow (hundreds, or even thousands) we would notice poor scrolling performance and poor rendering performance as the user switched between channels.\nBy using the tools and methods below, our team was able to identify and eliminate 13,000+ wasted renders in initial application load, and thousands of additional wasted renders post-load in the Church Online Platform.\n\nIdentify Performance Issues\nIn react-dom 16.5+ the React team has provided enhanced profiling capabilities in DEV mode through the React DevTools. This is always the first tools that I grab when investigating potential performance optimizations. You can find them here:\nChrome Browser Extension\nFirefox Browser Extension\nStandalone Node Package\n1. React DevTools Profiler\nIf you’re benchmarking or experience performance problems with a specific component, the React DevTools Profiler is usually the first place I will look. There is an excellent blog post and video walkthrough that goes into great detail on using the profiler to gather performance data.\n2. React DevTools Update Highlighting\nReact maintains a virtual DOM that it reconciles against to determine which parts of the UI need to re-render based on props or state changing. This is great, but it also means we don’t really know which parts of our application are updating at any given time. In the React DevTools there is a setting you can turn on that will visually highlight elements on the screen as they render (or re-render).\nImage for post\nAs you can see in the form below, when typing in an input field the entire form is full of wasted renders. Later on, we’ll learn some methods and tools that can help prevent this from happening.',1599128955,1,',optimizing,react-performance,'),(37,'How to Configure VS Code Like a Pro','I have been using VS Code for almost two years now and I really love the development experience. With that said, it was just a few months ago that I really started using some of the features in VS Code that kicked my productivity and development process i','how-to-configure-vs-code-like-a-pro','https://miro.medium.com/max/700/1*FytEuHhSO2yzfnCcP00NgA.jpeg','This is the purpose of today’s article: to showcase the advanced features that VS Code has to offer in order to make your life easier and more productive.\nHere is a list of the topics that I will cover in this article:\nHow to set up a workspace.\nHow to set up a multi-folder workspace.\nExpose and share extensions via your workspace (really useful for teams).\nHow to set up and run automated tasks within a workspace/multi-folder workspace.\nHow to create custom snippets within a workspace.\nAlong the way, I will also share some of the best VS Code extensions that I use on a daily basis. At the end of the article, I will also provide a small repo that contains all the tips and tweaks that I am going to cover in the next few minutes. I am using the latest version of VS Code (1.47.2 at the time of writing), so please make sure your editors are up to date in order to follow along without any issues.\nWhy Do We Even Need a Workspace?\nIn order to apply any settings or a configuration on a project-based level rather than on a global (user) level, you will need to have a workspace.\nHaving a workspace allows you to tailor every aspect of your working environment to serve and match the specific needs of the project you are working on.\nHere, I am talking about extensions, tasks, snippets, and even how your text editor looks. That is exactly what I will cover, and I will show you how to set up and configure within your own workspace.\nEnough talk, let’s see how we can create a workspace:\nImage for post\nWorkspace setup\nIt’s that easy ! Once you’ve named your project workspace, you should have a file with a .code-workspace extension on the root level of your project that looks like this:\nImage for post\n.code-workspace file\nAlso, I need to mention that if you’ve closed the project and want to reopen it, you should do it from File > Open Workspace to apply all the saved settings inside your project’s workspace.\nRight now, the workspace file is looking really empty and not doing much, but we can quickly change that by installing one of my favourite extensions when it comes to how VS Code looks.',1599129009,1,',vscode,config,pro,'),(38,'Optimistic Updates in React','Are you building an app that needs to be snappy for its users? Then you should probably consider doing optimistic updates. This will greatly improve the customer experience and the overall feel of your app. It will also better mimic the experience you hav','optimistic-updates-in-react','https://miro.medium.com/max/700/1*H5cGAutiwm2LkxDjvhY6Zw.png','What are optimistic updates?\nOptimistic updates are a way of updating data in your app. You generally want to have a local state inside of your app, and before making the HTTP request to update in the backend, you want to update the local state with the data you assume will be returned by the backend. This also prevents jumps or flashes between the old and new data.\nPatch local state with assumed data\nPatch database in backend through HTTP\nPatch local state with returned values (optional)\nImage for post\nWhy optimistic updates?\nAs I briefly mentioned earlier, optimistic updates are good if you are building an app that is in dire need of performance and rapidness. For example, if you are building a Kanban board tool where your users can drag cards back and forth between columns waiting for the response from the server destroys the experience. Each time the user drags a card it’s going to jump back to its previous column until the server responds (which can take many seconds on a slow connection). You might think that this is only an issue with slow connections. But, if you try to implement something like a Kanban board this way, you will quickly realize, even if you’re on a really solid internet connection, that the card will quickly jump back to its previous position before taking its new one. Even if it’s just for a split second this can cause a user to have a pretty bad experience.\nImproved UX\nBetter synced state\nOffline functionality\nNative feel\nHow to do optimistic updates?\nImplementing optimistic updates can be done in so many different ways. Either you can just use a state hook and update it before requesting the server. I’ll cover how to do this in Redux since it’s pretty easy — and also gives offline functionality by default.',1599129045,1,',optimistic-updates,react,'),(39,'Type Vue without TypeScript','A practical guide for type checking Vue components written in JS and getting things done.','type-vue-without-typescript','https://miro.medium.com/max/518/1*B8sBq-sbvoVpAxc8rGyfRg.png','Why do we need types?\nIn the last decade, browsers have become very powerful, allowing developers to build rich interactive applications. The interactivity and richness have come with an increase in complexity and size of the codebase in the frontend. Large complex codebases demand more attention and frontend teams have become larger.\nWhen more than one developer collaborates, there is a requirement of clear interfaces and APIs. JavaScript is very flexible, but you cannot deduce the type of arguments a function would accept.\ne.g., What do you think print function’s argument type is?\nfunction print(value) {\n  console.log(value)\n}\nThe type of value is ambiguous, even after looking at the source code of the print function which poses problems in large codebases where you cannot afford to jump into the source to deduce argument type of a function. One way to resolve this issue is to document the function’s API, but docs have a tendency of getting outdated.\nWhat if there were a way to know a function’s argument types by just glancing over the function name?\nYes, there is a way: types or TypeScript.\nfunction print(value: string) {\n  console.log(value)\n}\nAs soon as we look at the print function, we know value should be a string. That little information immediately boosts collaboration and productivity.\nIn some sense, types make APIs self-documenting. Apart from this, code editors/IDEs also benefit a lot from types. IDEs can provide intelligent suggestions, and display type mismatches inline.\nImage for post\nImage for post\nIntellisense/Type-based suggestion (left) — Type mismatch error (right)\nAny application that can be written in J̶a̶v̶a̶S̶c̶r̶i̶p̶t̶ TypeScript, will eventually be written in J̶a̶v̶a̶S̶c̶r̶i̶p̶t̶ TypeScript.\n— J̶e̶f̶f̶ ̶A̶t̶w̶o̶o̶d̶ Rahul Kadyan\nSo TypeScript is it?\nTypeScript makes interfaces explicit and enables collaboration, but it comes with its complexity and downsides.\nAdditional time would be spent adding types.\nJavaScript’s flexibility is lost as we have to type everything and sometimes it gets very complicated to add types.\nA steep learning curve and retraining of developer staff.\nVue and TypeScript\nVue provides a fluent object-based API for authoring composable components.',1599129085,1,',vue,typescript,'),(40,'How to Ace a Job Interview with Radical Preparation','Job interviews are terrifying. Every interview I’ve been to has petrified me, and I’ve been to a lot of interviews. I passed some; I failed others.','how-to-ace-a-job-interview-with-radical-preparation','https://miro.medium.com/max/700/1*aJB-ess0r80bg24OMHK6aQ.jpeg','Nothing worked, except for preparation. But of course, when I introduce a buzz word like preparation, it begs the question: What does preparation mean? I can’t capture its essence in one line, but in essence, it’s training for competition day.\nNot preparing for interviews is like blindly shooting at a target and hoping to hit the mark. Preparing for interviews is like being a sniper who knows how to aim. Sure, you still might miss, but you have a better shot.\nLearning to prepare for interviews changed my life. I mean it. I went from being jobless to becoming a tutor, sales assistant, software engineer, business analyst, management consultant, and now, a writer. Of course, the changes didn’t happen overnight. I spent years iterating on my process. I failed, learned, improved, and created a repeatable system to follow. Most importantly, I now never go into an interview without knowing what I’m doing. In success, I get the job I want. In failure, I know I tried my best.\nThis guide is for standard interviews. The same concepts can be applied to technical (and other) interviews, but I haven’t included specific details about those cases here.\n?‍♀️ Why Prepare?\n“By failing to prepare, you are preparing to fail.”\n― Benjamin Franklin\nI spent a lot of time debating whether I should include this section. I decided it was too important to leave out, because, for some strange reason, we humans have an aversion to preparation. There’s something taboo about preparing for interviews: it feels naughty. Part of it comes feeling that you’re not your true self; the other part comes from the pain of trying and still failing.\nI wish I had a lovely narrative about how preparing for interviews isn’t being inauthentic and that trying but still failing is an opportunity to exercise your growth mindset, but I won’t do that. Let’s brush ego-satisfaction aside and understand that an interview is a competition. It’s a battlefield with hundreds (if not, thousands) of other applicants who applied for the same role.\nIf you want to win a competition, you must treat it like one.\nTreat interviews like competition\nIf you were competing in a sport, you would prepare, so treat interviews the same way. Other people are preparing every day, and if you want to win, you need the same training.\nSo, the first thing to do is to take your interview seriously. Get your mind right: bring out a competitive mindset and understand you have to try your best.\nI used to hate thinking of interviews as competition. It felt toxic. But there were always other people in my interviews who prepared, and they consistently outperformed me. I was sick of it. So I accepted the competitive nature of interviews, and I haven’t looked back since. Sure, it has made every interview hurt more, but since it forces me to try, it has made me perform better.\nThere’s one caveat: competing and losing hurts.\nLose your ego\nWhen you don’t try, you can tell yourself you didn’t care. When you try and fail, you have no excuses. You have to tell yourself that you tried and failed. Your inadequacy sucker punches your ego, and it hurts. Someone stared into your soul and didn’t like what they saw — a horrible feeling.\nYou need to get yourself out of this mindset and take each interview as a learning opportunity. You can’t learn if you don’t try. It’s like taking an exam without studying, failing, and then not knowing where you went wrong.\nBeing rejected isn’t the end of the world. Failing after you prepared means you made the most out of the opportunity, and you got a little closer to acing an interview. Your interview preparation doesn’t go to waste; the training comes with you to the next interview.\nBefore I let myself get hurt, I couldn’t bring myself to take interviews seriously. I wanted to take the safe route and tell myself that I didn’t care about getting a job. But I was sick of being unemployed. So, I put my ego aside and gave every interview my best shot. I still failed, but I kept repeating the process, and eventually, I got a job offer (multiple ones).\nStart preparing\nTreating interviews as competition and losing your ego weaves together to put you in the mindset of someone who cares enough to prepare, and tries enough to risk getting hurt.\nNow that you’re ready to prepare, what can you do?',1599129125,1,',job,interview,'),(41,'5 Essential Libraries For Your Next React Application','What I love most about React, is that there’s no “one” way to build your application. It’s up to you as a developer to choose the libraries you wish to use and the patterns you wish to follow. This leaves you with infinite freedom to craft your applicatio','5-essential-libraries-for-your-next-react-application','https://miro.medium.com/max/700/0*sgpgV3G_vy8hDTil','That said, most of the applications I make, either for work or for personal projects, start with the same libraries.\nWe could build our applications using React and none of these libraries. We could make everything from scratch. There’s nothing stopping us from building an application with zero external dependencies.\nBut by leveraging the amazing contributions of the React community, we can spend more time providing value to our users, and less time reinventing the wheel.\n1. Formik\nLet’s face it. Almost all web applications have forms. And forms are a tricky thing to do right. There’s nothing more frustrating as a user than a form that doesn’t work correctly, or that resets after error validation, leaving me to type in all my information once again. The key to having good user experience in your web applications is to make sure you do forms right.\nWhat does that mean?\nForm fields should have client-side validation.\nA field should not show an error until it is “touched” by the user, or the form is submitted.\nThe form state should not be “lost” or “reset” what an invalid submission takes place\nThe form should handle asynchronous (server-side) validation after form submission.\nIf we were to code a component that handles all of that on our own, it would be quite complex. We would need to keep track of all of the form values, we would also need to keep track of the “touched” state of all the form fields, and we would need to keep track of the “errors”.\nWe would also need to build the logic for form submission. And all of this would need to be generic enough so that we could reuse it across our entire application. We don’t want to rebuild this in our login form, in our signup form, in our address form, etc.\nInstead of building it ourselves, let’s use a popular library from the React community.\nFormik is a library by Jared Palmer that makes writing forms in React a snap.\n2. Downshift\nYou might ask yourself, why use an external library to create something as simple as a dropdown or select input?\nYes — building a component that opens or closed based on mouse click is pretty simple. But like many frontend tasks, it’s not just building the component that’s difficult.\nMaking a dropdown that is accessible and usable to the large number of internet users who rely on screen readers is difficult. It’s hard to make it work properly for keyboard users.\nThat’s why I love using downshift. It takes care of the accessibility and leaves the behaviour and styling up to me.\n3. CSS-Modules and Classnames\nWhen I start a new React project, I usually choose CSS-Modules. Support is built into create-react-app, so it’s easy to get started. Sure, I could avoid a dependency by following BEM, but then I would need to learn how to use BEM ?. CSS-Modules gives me predictable, scoped CSS without the fuss.\nIn combination with CSS-Modules, I like to use classnames. How often have you written code like this?\nconst className = \'button \' + props.hasError ? \'error\' : \'\';\nreturn (\n <button className={classname} {...props} />\n);\nWith classnames, we can simplify this and write it like this.\nconst Button = props => (\n  <button\n    className={classnames(\"button\", { error: props.hasError })}\n    {...props}\n  />\n);\nAnd we can even combine it with CSS-Modules like this.\nimport styles from \'./Button.module.css\';\nconst Button = props => (\n  <button\n    className={classnames(styles.button, { [styles.error]: props.hasError })}\n    {...props}\n  />\n);\nIsn’t it wonderful? Scoped, easy to write CSS. There’s nothing better.\n4. Testing Library\nTesting saves me so much time. When I’m working on a complicated feature or component, there’s always back and forth between design, product and development. The designer might ask for visual or UX changes. Product might ask for UX changes. I’m constantly going back and back, refactoring, and updating the behaviour of the component.\nBy ensuring that my component or feature is properly tested, I can ensure that this refactoring does not allow regressions to sneak into the codebase. It saves me countless hours in manual testing, and it helps me to work faster, with greater confidence.\nWhen it comes to testing React application, there’s one gold standard: testing-library/react. Otherwise known as react-testing-library. It’s now built into create-react-app, so getting started is a breeze.\nWith testing-library, we can test our components from a user’s perspective.\nWhat does this mean? Let’s illustrate it with a practical example. In the following example, I wrote a test for a simple signup form. It asks users to provide their name, email and password. These are all required fields. If any is omitted, then the form should display an error on submit.\nimport { render, fireEvent } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { SignupForm } from \"./Form\";\ndescribe(\"SignupForm\", () => {\n  it(\"should show an error when password is omitted\", () => {\n    const rendered = render(<SignupForm />);\n    const nameInput = rendered.queryByLabelText(\"Name\");\n    userEvent.type(nameInput, \"John Smith\");\n    const emailInput = rendered.queryByLabelText(\"Email\");\n    userEventtype(emailInput, \"john@smith.net\");\n    const submitButton = rendered.queryByText(\"Submit\");\n    userEvent.click(submitButton);\n    expect(\n      rendered.queryByText(\"Please input your password\")\n    ).toBeInTheDocument();\n  });\n});\nAs you can see, first we render the SignupForm with react-testing-library.\nThen we type in our name and email.\nNext, we click the submit button.\nFinally, we assert that the message “Please input your password” is in the document.\nAs you can see, everything in this test is based on how the user interacts with the form. We could refactor the form to use different inputs, to split it up into multiple react components, all without breaking our tests.\nWhen I start a new React application, I always install these libraries. I write less boilerplate and can deliver value to my users faster.\nFormik helps me to quickly write elegant forms.\nCSS Modules and classnames help me write scoped CSS.\nDownshift helps me create accessible combo boxes and select inputs without forcing me to overwrite default styles\nTesting Library helps me write durable integration tests that provide real confidence in my application.\nWhat are your favorite libraries to use with React? What libraries can’t you live without?',1599129171,1,',react,'),(42,'14 Fundamental JavaScript Concepts Explained Simply','I’ve decided to do a summary map of the fundamentals of JavaScript. It’s made with the beginner in mind and basically summarizes the main foundational concepts without you needing to spend hours reading up on everything.','14-fundamental-javascript-concepts-explained-simply','https://miro.medium.com/max/1600/1*znseFGnOQR6U-bk0-4gnNg.jpeg','The point is to give you a gist of everything and let you get started quicker. This is not, by all means, a full guide. It’s only part of a bigger picture which I’m working on constructing.\nAlternatively, it can be used as a reference guide to quickly get you started. Bite-sized explanations are posted below. Hope you like!\nImage for post\n1. Code Structure\nAt its simplest, JavaScript is made up of a series of statements and semi-colons.\nA statement is like a sentence — but in code.\nFor example, this is a statement:\nalert(\'Say hi\');\nSemi-colons are not compulsory and can be committed when there is a physical line break in between. It’s the equivalent of a full stop.\nBut sometimes, line breaks do not guarantee that the statement is done. Using + signs can act as a connector between lines.\nFor example:\nconsole.log(\'This \' + name + \' is gibrish\');\n2. “use strict”\nFor a long time, JavaScript didn’t have to worry about backward compatibility. Why? Because feature releases never overlapped — until it did.\nIn 2009, ECMAScript 5 (ES5) was released and new features modified some of the existing ones. By default, modifications are not applied unless you enable it using \"use strict\"\n\"use strict\" must be placed at the top of your JavaScript code or else it won’t get applied.\nNowadays, always \"use strict\" because we don’t want to use the older implementations of JavaScript.\n3. variables\nVariables are placeholders for information. Think of it as a memory bucket that holds your data.\nUse the keyword let to declare a variable and give it a name.\nThis will initialize it. You can assign a value to it using =\nIf you don’t assign anything to it, the default is set to undefined — which means that it’s been initialized but there’s absolutely nothing in the bucket. In short, it just means that it hasn’t been set, ever.\nThis is different from null\nWith null , a developer has to manually assign it. In a way, it’s physically acknowledging the fact that your code has purposely made sure that the bucket is empty and that you just haven’t forgotten to fill it or that something went wrong in the process.\nIn older scripts, var is used. The way they behave impacts on your final output. I sort of wrote about it here. Feel free to check it out if you’re interested.\n4. data types\nThere are not many data types in JavaScript when compared to other languages. Here’s the comprehensive list and what they are:\nnumber\nlet someNumber = 2984;\nsomeNumber = 29.84;\nNo “quote marks” for numbers. Just the plain old straight numbers. You can do both integers and floating-point numbers. Basic operators work on numbers.\nThere’s also a special infinity number available. You just need to do 1/0 — so, one divided zero. This value is deemed to be the biggest number of all time and can not be viewed as the smaller outcome.\nIf you get NaN — it means that you’ve hit a computational error. It also means that you’re trying to do a mathematical operation on something that doesn’t make sense like dividing a string text with a number.\nBigInt\nIn JavaScript, the biggest number it can do is about 16 digits long. For most cases, our applications can survive on less than 16 digits. However, every now and then we might need it for really big numbers like cryptography.\nA BigInt is created by adding an n at the end of the number.\nconst someMassiveNumber = 1234567890123456789012345678901234567890n;\nString\nA string is a text variable, indicated by it being surrounded by quotes. There are 3 types of quotes you can use — \'single quotes\' , \"double quotes\" and ``back ticks\nDouble and single makes no difference in JavaScript. Backticks are more for extending the functionality of a piece of string and are used to embed variables using ${ }\nFor example:\nlet cat = \"Tibbers\";\nconsole.log( `Hi, ${cat}` );\nIf you used quote marks in the example above, it just becomes a normal string.\nBoolean\nWill print out either true or false\nThis is often the result of a comparison of some sort.\nnull\nIt just means “nothing”. Non of that null pointer stuff you see in other languages.\nundefined\nundefined simply means the value hasn’t been assigned yet. Nothing fancy.\nobjects\nOther types of data types are called primitives because they’re simple. Objects are things that allow you to set more than just one item to it.\n5. type conversion\nSometimes, you need to switch between the different types for whatever reason. Here’s how you do it.\nlet someFakeBoolean = true;\nsomeFakeBoolean = String(someFakeBoolean);\n//using String() will convert your variable into a string\nlet someFakeNumber = \"3872\";\nsomeFakeNumber = Number(someFakeNumber);\n//using Number() will convert your string into a number\nPlease take note that converting random text into numbers doesn’t work, and it doesn’t make any sense, in general, to do so. You’ll end up with NaN\nBoolean() will turn any value into a true or false output. Anything “empty” like 0 , null, undefined, and NaN will return false. Anything else will return true\n6. operators\nThese operators are not JavaScript specific and are generally supported the same way in most programming languages. Here’s the list:\nAND (&)  OR (|)  XOR (^)  NOT (~)  LEFT SHIFT (<<)  RIGHT SHIFT (>>)  ZERO-FILL RIGHT SHIFT (>>>)\nWhen using these operators, just say them out loud and they basically do what you’re saying.\nFor example:\nprintLine(line, id){\n if(line & id){ //if both exists, run this code }\n}\n7. comparisons\nThink mathematical comparisons. That’s what these are:\nGreater/less than: a > b, a < b.\nGreater/less than or equals: a >= b, a <= b.\nEquals: a == b (single = sign is an assignment rather than a comparitors).\nNot equals. a != b.\n8. alert, prompt, confirm\nThese are the popups that go ‘ding’\nalert(yourMessageHere);\nPrompts take two arguments — the question and the answers.\nlet promptMe = prompt(\'your question here\', [\'blue pill\', \'red pill\']);\nalert(`You\'ve taken the ${promptMe}`);\nConfirm means you need to click on the accept button for the code to return true.\nlet isOver18 = confirm(\"Are you over 18?\");\n\nalert( isOver18 ); // true if OK is pressed\n9. conditionals\nThe ever so famous if statement is a backbone of beginning JavaScript projects. The idea is simple, if something satisfies the conditions, run the code.\nThis is what it looks like:\nif (true) alert(\'woot!\');\nThe condition always returns a boolean as the final result. So you can have mathematical comparisons, checks and anything else you want in there, as long as it evaluates to a boolean.\nIn addition to the if statement, there’s else if and else\nelse if extends it with another if statement. else simply ends it with a catch all kind of clause.\nHere’s what it looks like:\nif(false){\n   //this code won\'t run because it returned false \n}else if(false){\n   //this also won\'t run\n}else if(false){\n   //still nope\n}else {\n   //final catch all\n} \n10. loops\nThink of it as a repeated if statement without having to manually write out the same thing every time or do multiple calls to get it to run.\nIt has a condition and will only stop running the code once the condition returns false\nlet i = 0;\nwhile(condition){\n  //some code here\n  //don\'t forget to set your exit clause by modifying the condition to return false. Most people just use i++\n}\n“do…while” loops turns it the syntax upside down and checks the condition after it’s run the code. Why? Because sometimes you just need to run the code at least once.\nHere’s what it looks like:\ndo{\n  //some code here\n}while(condition);\n11. switch statements\nSwitch statements basically give you the ability to write options.\nHere’s what it looks like:\nswitch(yourValueHere){ \n   case \'optionOne\' :    \n     //your code here   \n   break; \n   case \'optionTwo\':   \n     //your code here   \n   break; \n   case \'optionThree\':   \n     //your code here   \n   break; \n   default:   \n     //your fallback code here \n}\nYou can also group cases so you don’t have to write the same output more than once.\nswitch(yourValueHere){ \n   case \'optionOne\' :    \n   case \'optionTwo\':   \n     //your code here   \n   break; \n   case \'optionThree\':   \n     //your code here   \n   break; \n   default:   \n     //your fallback code here \n}\n12. functions\nFunctions are like the building blocks of a JavaScript application, library, framework and any ‘program’ written in the scripting language.\nThere are built in functions that we’ve already encountered before like alert() and prompt()\nYou can write you own functions like this:\nfunction functionNameHere(){\n  //your code here\n}\nAnd then you just call it using the function name:\nfunctionNameHere();\n13. function expressions\nThere’s more than one way to write a function. Here are some ways you can write it:\nfunction yourFunctionName(){\n // some code here\n}\nlet anotherFunction = function(){}\n14. arrow functions\nAn arrow function is just syntax to make writing your functions shorter. Here’s what it looks like:\nlet functionNameHere = (argumentsHere) => //do something\nArrow functions usually sit on one line but multiple lines are possible with the help of curly { }\nHere’s what it looks like:\nlet cat = () => { \n   //this is \n   //a multi-line \n   //example \n   return someValue; //is required. Can just be a straight return; \n}\nWhen using curl { } with arrow functions, you need to also use return to exit out of it.\nAnd that’s basically it for this piece — for how.\nI hope you found it useful!\nThank you for making it to the end.',1599129224,1,',javascript,concepts,'),(43,'How and Why You Should Avoid CORS in Single Page Apps','Over the past decade, Single Page Apps have become the norm technology to build web apps. Today, frameworks like Angular, Vue, and libraries like React dominates the frontend development, providing the underlying platform for these apps. ','how-and-why-you-should-avoid-cors-in-single-page-apps','https://miro.medium.com/max/700/1*TKYFiZnIhfHi_PAFcG0geg.jpeg','The good news is, it serves the frontend and backend APIs from a single domain. But there are instances, where we serve frontend (e.g., web.myapp.com) and backend (e.g., api.myapp.com) from separate sub-domains. Sometimes, we allow cross-origin access at the backend API for the development environment only.\nImage for post\nCross-origin resource sharing (CORS) is a mechanism implemented in web browsers to allow or deny requests coming from a different domain to your web app. With CORS, web browsers and web servers agree on a standard protocol to understand whether the resources are allowed to access or not. So remember, enforcing CORS from your backend, doesn’t mean that Bots or any other mechanism can’t access your server resources.\nThis “relationship” between frontends and backends becomes even more complex when sharing and reusing what could be referred to as “micro apps.” For example, some developers use Bit.dev, a cloud component hub, to publish “smart” front end components (as opposed to “dumb” logic-less UI components) with their network requests written in. This way, they can be reused across projects as fully-operational widgets or micro-apps, “straight out of the box.” That is, of course, a challenge as the source of these requests to the backend can vary.\nImage for post\nExploring React components published on Bit.dev\nDo you need CORS?\nBut do we need to allow CORS for your web apps? I would say for most of the cases, you don’t need to worry about CORS since your web app is served from a single domain. However, there could be special features like allowing to embed a page (e.g., Form, Video) outside your main web app domain, where you might consider enabling CORS in your backend. Still, you can enable CORS scoped to that particular feature.\nThe Problem with CORS\nThe most visible problem with CORS, besides security, is the impact on the performance in web apps. When your frontend sends an HTTP request to a different domain or subdomain, the browser will send an additional HTTP called preflight request, to see whether the server accepts messages from the sender’s domain.\nSo for each HTTP request trigged by the frontend, the browser needs to send two HTTP requests, increasing the overall response time. In most cases, the added delay is visible in web apps and adversely affects user experience.\nCORS in Single Page Apps\nWhen it comes to Single Page Apps, usage of CORS is much more apparent. Web browsers, won’t consider the preflight request if the web app use only the HTTP headers (Accept, Accept-Language, DPR, Downlink, Save-Data, Viewport-Width, Width, Content-Language, Content-Type (Except the values application/x-www-form-urlencoded, multipart/form-data, text/plan)) and HTTP methods (GET, HEAD, POST) for the backend API calls. You will likely need beyond these HTTP headers and HTTP methods in your Single Page Apps.\nIn these apps, we define the backend API URL in the frontend as a variable for server operations. Besides, we might even grant CORS in our backend API for development, since the development server for frontend and backend API might be running in two different ports. The development environment might also influence your setup in production, where you might deploy the frontend and backend API in different subdomains.\nBut do we need to go in this direction? Let’s look at ways to avoid CORS for both development and production environments.\nAvoiding CORS in Dev Environment\nToday, most of the development servers we select for frontend development uses NodeJS. Most of these Node servers support proxy configuration. Besides, Angular, React, and Vue come with Webpack dev server that has inbuilt support for proxy configuration.\nSo what precisely this proxy configuration do?\nLet’s assume your frontend app is running in http://localhost:4200 , and backend API is running in http://localhost:3000/api/<resource>. Your frontend needs to store the backend API URL and port to run the app locally. Besides, you will also need to enable CORS in your backend API, allowing API calls coming from the frontend. Here, the frontend and backend API domains are the same (http://localhost), but the ports are different, where they are considered as different origins by the browser.\nWe can avoid all the above hassle by using the proxy configuration in frontend development servers. When you use a proxy, you need to store only the relative path ( /api) in your frontend app. When running the app locally, your frontend will try to access the backend API, using the same domain and port (http://localhost:4200/api/<resource>), the browser won\'t have any concerns over CORS.\nAt this stage, the proxy does its magic. Inside the proxy configuration, you can define to forward any requests coming for the path /api to http://localhost:3000at your frontend development server.\nSince your development server is the middleman communicating with your backend API, it can safely avoid CORS. The example below shows how you can add proxy configuration in the Webpack dev server.\nmodule.exports = {\n  //...\n  devServer: {\n    proxy: {\n      \'/api\': \'http://localhost:3000\'\n    }\n  }\n};\nAs an alternative approach, if you don’t want to use relative paths in the frontend for the backend API, you can start your web browser with specialized flags to disable CORS for local testing. e.g., Run Chrome browser without CORS.\nAvoiding CORS in Production Environment\nIn the production environment, unless your frontend and backend API run inside the same web server, you need to set up a gateway or a proxy in front of them to serve from a single domain. In some cases, your load balancer would be sufficient if it can route to different endpoints based on HTTP paths.\nSimilar to the dev Server proxy, the gateway, proxy or load balancer does the routing based on the configuration we provide, matching the HTTP path received in the request. The following list contains a few popular gateways, proxies, and load balancers that support URL path-based routing for your reference.\nNGINX\nTraefik\nAWS CloudFront\nAWS Application Load Balancer\nAzure Application Gateway\nBesides, it is essential to harden your backend APIs for CORS by only allowing same-origin access.\nSummary\nOverall, I hope you understand the performance implications of CORS and the benefits of avoiding it in Single Page Apps. Besides performance, security is the ultimate reason behind the establishment of CORS in modern browsers. Therefore it’s crucial to know the fundamentals of how CORS works in terms of security. However, you should be able to find enough or more content about CORS and security, which is not the primary focus of this article. My focus here is to avoid CORS in the first place for Single Page Apps.\nSince I’ve touched upon using proxies to avoid CORS, you might wonder how difficult to set up a proxy, when frontend and backend API runs on separate services. Nevertheless, setting up a proxy is easier than you think. For instance, setting up a dev server proxy for Angular, React, or Vue, it is a matter of adding few lines in Webpack config file to proxy your requests to the backend API to avoid CORS. The same applies to the production environments since there are well-established ways to implement URL path-based routing.\nHowever, you must establish a proper path conversion for your backend API to avoid needing to update the proxy configuration each time you add a new endpoint. For instance, if you use a base path (e.g., \\api\\), it is easier to write a simple rule to route requests to the backend API for all requests having the base path and fallback to frontend assets for other HTTP paths.\nAt last, I would like to reemphasize that if you don’t have any requirement to use CORS, enable only the same-origin access for your backend API, both in development and production environments. From my experience, it will save a lot of time down the line avoiding many pitfalls.',1599129267,1,',cors,spa,'),(44,'6 Easy React Tricks That May Surprise You','Over time I’ve come across some simple things that I’d never thought of before and that gave me real “aha!” moments. I’ve also noticed that many people I work with are not aware of these tricks — simple things that can make them happy!','6-easy-react-tricks-that-may-surprise-you','https://miro.medium.com/max/700/0*d0v6pC5ijXN2Uy8l','React Keys with Fragments\nSometimes you need to render multiple components inside lists. If there’s no need for a container, use React Fragment. Here’s an example:\n\nThe code above is totally legit but React will start to complain about keys:\nWarning: Each child in a list should have a unique \"key\" prop.\nYou see the error and say “Yeah, whatever.” Then you replace the fragment with a div.\nActually, you were on the right track — you just missed a tricky point that you may have not have thought about. You can use keys with React Fragment but just not with the syntax you see above. You have to change that syntax with <React.Fragment>, then you’re good to go:\n\nString Values as HTML Elements\nSometimes you want to create a component that can be a flexible HTML element. Or you may have seen as prop from CSS-in-JS libraries like emotion.\nLet’s say that you want to create a <Button> component that can render as a button or an a. What are the options? You could abstract the style and create two different components with it or you could just create a component and use React.createElement with as prop:\n\nThat’s fine for a simple component, but what if there’s another way that looks and feels better? Here’s the JSX trick:\n\nYes, you can use a string as a component in JSX — just make sure that the string component name starts with a capital letter.\nPass a Function to setState\nuseState and useEffect are probably the most frequently used hooks. You need to pass your dependencies to useEffect, or expect some bugs or unwanted effects, but, if your dependency is just a state to use with the relative setState, maybe you don’t need to pass it. Let’s first see the not-so-good version:\n\nThere is an easy way to get out of this situation: Using a functional updater form of setState, like this:\nconst [count, setCount] = useState(0)\nsetCount(c => c + 1)\nHere’s the updated example:\n\nImplement useState with useReducer\nThis one is a bit of a fun trick that I heard about on Twitter. There’s no real benefit but it’s still good to know to understand what useReducer is capable of.\nIf you directly return the action from the useReducer then it behaves almost the same as useState. So you could argue that useState isn’t necessary. Here’s the tweet:\n\nHere’s the code that you can copy-paste and try out:\nconst [name, setName] = useReducer((_, value) => value, \'James\');\n<input value={name} onChange={e => setName(e.target.value)} />\nManually Re-render a Component\nHave you ever needed to re-render a component manually? For example, you need to re-render a component but there’s no state or anything that you can touch to do it. Let’s say that, for some weird reason, you want to do it when a button is clicked.\nHere’s what you can do:\nconst [, rerender] = useState()\nrerender({})\nThat’s it! You use useState but you don’t actually need the state itself. You just need the setState function or the rerender function to cause a re-render. The important part is you need to pass a new value every time it runs like an empty object or array.\nMove Objects or Functions Out of Component If There is No Direct Props/State Dependency\nI see this particular mistake pretty often. In order to describe, first, let’s take a look at the code.\n\nThe idea is good — much better than if/else or switch cases. But there’s a problem. Every time this component is re-rendered a new cardProps object is created. Even if nothing changes it will cause a re-render for all dependent components.\nTo solve this problem I see that useMemo is used:\n\nuseMemo solves the problem but everything comes with a cost. If you look at the code carefully you can see that there’s no reason to put the cardProps object into the component. Naturally, there’s no need for the useMemo overhead either, because that object doesn’t have a direct dependency on any props or state. Even if it comes from outside you can still use ...cardProps[types].\n\nAs you can see — no Hooks are needed. Just move things outside if there’s no need for them to be inside — and the same goes for functions.\nConclusion\nWhenever you think you’ve learned enough you find things that surprise you — there is no end to learning.\nSo, keep learning and be surprised!\n',1599129336,1,',react-tricks,'),(45,'I Read The Entire React API. Here Is My Advice To New Developers','I read the whole React Top-Level API and here’s my advice for noobs learning React and experienced programmers adopting React.','i-read-the-entire-react-api.-here-is-my-advice-to-new-developers','https://miro.medium.com/max/1920/0*8LdBw2LBM0U4AVyA.jpg','Introduction\nOne of the first things to overcome about React (or ReactJS) is the hype around it. The “JavaScript library for building user interfaces” (not a framework), is often presented from a very high-level perspective by most React experts, gurus and even the core-team developers. Seemingly one is expected to elevate their programming thinking to grab the concepts and principles.\nTake note, React is not a framework but a library as it depends on third-party libraries to provide some core functionalities such as routing, unlike frameworks like Angular or Vue.js which have such inbuilt. So it is not a complete framework. However, it’s the golden child of frontend libraries and frameworks because of its simplicity in applying advanced programming concepts. In these days of loose coupling and microservices, it’s the frontend library (sitting on the same level as other JavaScript frameworks like Angular and Vuejs), with the closest philosophy to idiomatic JavaScript for building sophisticated frontends. It is not stuck in Angular’s TypeScript/MVC architecture or Vue.js’ coupling to HTML.\nMore so, React is a Facebook open source project, created by Jordan Walke, and led by some of the most aggressive young developers — Dan Abramov who often explains the concept behind the library cryptically, and is almost visible on any React subject in the (social) media and Brain Vaughn who transitioned from graphic design to programming, built react-virtualized, and landed a job on the React core-team\nThe React Way\nThe high-level perspective which anyone coming to React is expected to internalize stem from the fact that React is neither a framework nor a programming language, but a library which its developers have selected certain principles which they believe are more suitable for building responsive and functional user interfaces. Such principles include component-based design, composition over inheritance, top-down unidirectional data flow for consistency found in functional reactive programming.\nIt is based on a declarative paradigm as opposed to an imperative paradigm. Furthermore, React incorporates the major paradigms of Object Oriented programming (OOP)and is best implemented using modern JavaScript, ES6 and later editions, though it has backward compatibility for ES5.\nBecause React favours composition over inheritance, you do not implement any interfaces, they were phased out after the React team rejected the use of Mixins which is a high order construct to interfaces. For the Java clan, interface is an inherent part of the language, and it has adopted Mixins in Java 8 interfaces. So such a person coming from class-based inheritance paradigm needs mostly to master JavaScript, learn dynamic typing, and other wonderful features of the JavaScript language such as knowing that everything is a function aside your variables. You could pass functions into methods, objects in plain JSON format and do callbacks and a lot more.\nEverything Is a Component\nIf you are an experienced programmer coming from class-based inheritance languages like Java, C#, and you know frameworks like Spring Boot, you would find that the major building block of React is the React.Component class which defines the methods you will implement, one of which is render(), which is mandatory for any component that would render itself including other components it contains on the webpage. All components may not declare a render method, only those that would render components (read insert) to the DOM and make use of life cycle methods and internal states, others can get their states as props. And they can be declared like normal JavaScript variables and must be initialized to or return in a function as JSX, JavaScript XML and included in another component which contains the render method. So you do not have any hassles understanding methods you should override to gain some capabilities existing in the parent Component class.\nFor those who are new to programming, you have to learn two things, Class-based inheritance and Prototype-based inheritance of OOP. For instance, if one is still using classes in React. They would need to understand the modeling of objects into classes (OOP) and certain concepts like static keyword. A typical example is static getderivedstatefromprops in React Component where this keyword which refers to the class cannot be accessed. Because the static method is not a member of the object which wants to call it, but can be accessed at class level. Again, when you write ReactDOM.render() which is the bootstrap to kick off a React application, the render method of a ReactDOM function is called. Complete newbies to programming have a steeper learning curve.\nNewcomers would be confused because there are three ways of writing React components today which are all valid. (In Angular [not AngularJS] it is strictly TypeScript.) They are:\nClass-based components\nFunctional components\nTypeScript functional components\nClass-based components were adopted after ES5, where every component can be a class and has class variables which are declared using this.state{}. The class takes props (properties) in its constructor which must invoke super(props) passed on to it from the parent component.\nLet’s say you are developing a todo app and you have two or three todos cards on a page and you make a todoparent component that contains the todos, you will have your parent component make database calls and get the data for all todos and display and you have each todo component update it’s content and save to the database. So the initial data you pass to todos are props and the data of each todo is its state. You will encounter how to manage state using PureComponents, Higher Order Components (HOC) and helper libraries like Redux.\nFunctional components are the preferred way to write React components nowadays. They were released as part of React version 16. They are idiomatic JavaScript. To manipulate their state, Hooks were introduced. Hooks are functions used to “hook” into states of functional components because they are stateless, it has no this, therefore don’t have states like classes. A hook is declared with “use” as the first word. Such as useState. It returns the state and a setter if need be or just the state.\nExample is:\nconst [count, setCount] = useState(0)\nWe initialized count = 0. We included a setter for updating the state. We should not do count +=1 in the component as they introduce bugs. Instead we do setCount(count+1). Hooks are so idiomatic that it’s pure JavaScript so one may not bother again with too much knowledge of classes. If you are a pro in JavaScript, believe me, you can learn React in one month. Everything can be manipulated with hooks. The React Lifecycle methods React.Component provide can be imitated using useEffect Hooks which has these variants:\n// (1) On Mount and every render\nuseEffect (() => { \n  dosomething()\n});\n// (2) Only on Mount\nuseEffect (() => {\n  dosomething()\n}, []);\n// (3) On Mount/every time state of count changes\nuseEffect (() => {\n  dosomething()\n}, [count]);\n// (4) UseEffect with cleanup\nuseEffect (() => {\n  dosomething();\n  return clearSomething(){};\n});\nNotice the difference in the four useEffect hooks. First one has no second parameter (runs on mount and every re-render), the other has an empty array (runs only on mount), and third has count in an array (runs on mount and whenever state of count changes), and last one returns a function which is used to clean up when unmounting a component. They are used to mimic the lifecycle methods — componentDidMount, componentDidUpdate and componentWillUnmount — we need in classes to manage mounting, updating and unmounting components. The fourth one is used for unmounting, notice the returned function. Other lifecycle methods can also be implemented with Hooks -getDerivedStateFromProps can be implemented with comparison between component state and props. shouldComponentUpdate can be implemented with React.Memo to prevent re-rendering and it uses memoization.\nDebates about functional components and classes are common in the React ecosystem. Despite how ubiquitous functional components are, there are features that don’t yet have functional implementations like Error Boundaries for catching errors in components explicitly. Some think that the claim that functional components are faster than class components is a myth.\nTypeScript functional components are enhancements to functional components. The need to introduce static typing has been made possible with TypeScript where all variables and parameters must be given a type at declaration and in function parameters. Typechecking done with Proptypes in class and functional components are compulsory in TypeScript for type safety but done with interfaces.\nAnti-pattern\nYou will often hear the buzzword, anti-pattern. Anti-patterns in React are the deviation from the principles written and unwritten guiding how React should be implemented for best results. Deviations result in bad programming practices. An example is changing props in child components. It is not advisable to do that because it breaks the top-down flow.\nState Management\nReact is inherently attached to Redux (this is changing) which is a state management library, in fact React jobs are advertised together with Redux nowadays although we have other state management libraries like Flux and Mobx, but Redux is the default choice. We know most front end applications manage state, Redux provides a store, reducers and actions to help with this. In choosing a project for learning, choose one which uses Redux. It will help to make the learning complete.\nThe Experts\nFinally, React is a fine frontend library (read framework). I don’t know Angular as much as I know React now but I have done the stackblitz tutorial. One of the best places to learn React is egghead.io. One of the chief developers of React, Dan Abramov, has video tutorials there. Then Kent C Dodds who has his own website. There is also Tania. And thousands of others you can find via Google. What you actually need is to start thinking in JavaScript and OOP (class-based and prototype-based) including knowledge of DOM API, not really deep. React provides an abstraction on top of DOM API, so you do not manipulate the DOM directly but can do so through refs if you wish to, but you need to know how it works at the basic level. Through ReactDOM, we are able to insert JSX into web browsers so it is platform and browser independent. You can basically do everything you want in React. Until you get advanced and begin to build complex user interfaces, you may not worry about the underlying wiring and boilerplate codes. You can take tour of the React GitHub page and see things for yourself.\nConclusion\nI do not want to dive deep because this is meant to be an overview into a world of React which cannot be captured in one article or book. I don’t even know much yet. I am learning vigorously to become a React Rockstar before the end of 2020. But what I have elucidated above came from learning by doing, infact I implemented a calculator using React, read the whole Top-Level API and have been answering questions on React on Stackoverflow. I have also worked on a React Native app that someone started and I finished it.\nI believe I have given a bird’s-eye view into the world of React. Believe me, master the concepts and in less than 6 months, all the magic and principles of React would sound normal to you. I didn’t understand these things a year ago from writing this tutorial. I can remember the first time I read the official React tutorial, it sounded like Greek but today, it makes a lot of sense.\nJikagon syt ziry (“Go for it” in High Valyrian).\nThis article has been translated into Chinese available at InfoQ.',1599129373,1,',react,'),(46,'6 Tips and Best Practices for a Scalable React Project','When starting a new React project, it’s always a good idea to put together some guidelines that you and your team will follow to make the code scalable.','6-tips-and-best-practices-for-a-scalable-react-project','https://miro.medium.com/max/700/1*seQqr3jYNGlfZ-1w9oeRrQ.jpeg','In this post, I will share with you a handful of insights from my years of using React that will help you to determine your own project guideline.\n1. Learn how to organize state between local and global state\nReact is a library that manages the UI based on its current state. As a developer, it’s your job to organize where to keep the state that makes up your application. Some developers prefer to keep every single piece of data inside the redux store to keep track of all available states.\nBut do you really need to dispatch an action to your state manager just to open or close a simple dropdown menu? And do other parts of your application need to know about the value of that contact form? Form values tend to be short-lived and only used by the component that renders the form.\nRather than using Redux to keep track of every single state inside your application, it’s better to keep some state local to avoid over-engineering your application.\nAs a rule of thumb, you can ask these questions:\nDo other parts of the application care about this data?\nDo you need to be able to create further derived data based on this original data?\nIs the same data being used to drive multiple components?\nIs there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?\nDo you want to cache the data (ie, use what’s in state if it’s already there instead of re-requesting it)?\nDo you want to keep this data consistent while hot-reloading UI components (which may lose their internal state when swapped)?\nComponents using local states are more independent and predictable.\nLearn the benefits of testing and do it from the start\nThe thing about writing automation tests is that at a certain point, it’s impossible to test your React project manually without spending a major amount of time and resources.\nWhen starting out a project, it’s very easy to justify skipping writing test code because your codebase is relatively small. If you only have five to ten components in your React application, writing automation does feel like a chore with no clear benefit. But when you have more than fifty components and you have multiple higher-order components, testing your project manually might take a whole day, and even then there could be bugs creeping in without anyone noticing.\nYes, writing test code will help you make your code more modular. Yes, it will help you find errors faster and safeguard against crashing in production. But automation testing is ultimately about helping you grow your project when manual testing can no longer verify the code is working as expected.\nBut you can’t suddenly write test code when you’re not used to it. That’s why you have to start at the beginning. If you don’t know where to start, then start from integration test because the most important part about testing is that you verify that your components work together properly.\nAdopt tools to help you scale\nNormally, you don’t need to add many tools to your React project at the beginning of your application. But since we’re talking about scaling React application to a large codebase, I’d say you need to adopt all the good tools to help you out.\nPrettier and ESLint will be needed to give a consistent code pattern between team members and reduce syntax errors. Powerful utility libraries like React Router, date-fns, and react-hook-form are always good to include.\nAdding TypeScript and Redux may be delayed until your app is prone to typing errors and parts of your application require the same state over and over again that you need to make it globally available.\nImplementing state management from the start is not needed because React itself already thinks of the best way to manage state without making you crazy.\nBit (Github) to manage and share your components as independent building blocks. That means you test and render each component in isolation. That will guarantee an easier time maintaining and reusing it, later on.\nMoreover, when using Bit in your project, Bit source-controls each component independently (alongside your project’s SCM), which means a component (shared to Bit.dev) can be maintained completely independent of its project (i.e by “importing” a component from Bit.dev, changing it and “pushing” it back to its shared collection)\nOh, and you can also use Next.js instead of Create React App to start your project.\nThese tools will help you maintain a large React codebase, but be aware that each tool you add will increase the complexity level of your project. Please do your research before deciding to adopt the tool into your stack.\nOrganize your project files well\nOne of the best tips that I learned on scaling React application is that organizing your project files and naming them well can speed up your progress. Some developers tend to write index.js as the main file in a component directory, like this:\nImage for post\nOrganizing components with index.js\nThat seems reasonable because when you import the components into other files, the statement becomes simply this:\nimport Button from \'../components/Button\';\nBut consider when you open them side by side on the code editor:\nImage for post\nindex.js everywhere\nHonestly, all those index.js will make anyone confused. But if you rename those index.js files into the component name, your import statement will look a bit ugly:\nimport Button from \'../components/Button/Button\';\nMy team finally settled on having both the file named after the component and an index.js file that exports the component:\nImage for post\nAdding a component file beside index.js\nWe also put the CSS and unit test file inside the component directory. This way, each component directory can be a self-contained component.\nImage for post\nA self-contained component\nBuild your UI/logic component library\nYou should not wait to build a component library only when your project has reached its large proportions. You can continuously share components as-you-go. Whenever a new component is built, use Bit to track it and share it to your team’s component collection on Bit.dev, or on your own server.\nAs mentioned earlier, (truly) independent components are much easier to maintain and when shared and documented, are much easier to reuse.\nA component library is not only for UI components. Logic should also be included — in the case of React, as custom hooks (by and large).\nImage for postImage for post\nRead more about it here:\nBuild Scalable React Apps by Sharing UIs and Hooks\nHow to build scalable React apps with independent and shareable UI components and hooks.\nblog.bitsrc.io\nDecouple your logic from your component with hooks\nAs your project grows, you might notice that some of your component’s logic seems to get used over and over again. To share your component’s logic, you need to write a custom hook.\nFor example, let’s say you have an application that counts the score of a Basketball match:\nsharing-with-hooks - tutorial-examples · Bit\nTags: Hook, React. Dependencies: react. Built with React. Use sharing-with-hooks by nsebhastian in your code.\nbit.dev\nAs you can see in the example, HomeTeam.js and AwayTeam.js used the same logic for incrementing the counter. When you have the same logic responsible for driving UI changes, you can decouple the logic from your component and put it in a separate file.\nIn the example below, I removed the counter state and increment logic into a separate util.js file and import it into the components:\nsharing-with-hooks - tutorial-examples · Bit\nTags: Hook, React. Dependencies: react. Built with React. Use sharing-with-hooks by nsebhastian in your code.\nbit.dev\nHooks are simply functions that return certain values back into its caller, that’s why you can implement the same pattern to reuse logic between your components.\nConclusion\nAlways remember that building React application at scale is a complicated task that requires you to consider the best decision for both the consumers and developers. In the end, the best practice is the one that works for your users and your team.\nAlthough you will always have to experiment with tools and methods for scaling your React project, I hope the tips I’ve shared above will be useful for you.',1599129401,1,',,'),(48,'Test Markdown','This is just a test blog to show that markdown works :D','test-markdown','https://demo.codimd.org/screenshot.png','---\n__Advertisement :)__\n\n- __[pica](https://nodeca.github.io/pica/demo/)__ - high quality and fast image\n  resize in browser.\n- __[babelfish](https://github.com/nodeca/babelfish/)__ - developer friendly\n  i18n with plurals support and easy syntax.\n\nYou will like those projects!\n\n---\n\n# h1 Heading 8-)\n## h2 Heading\n### h3 Heading\n#### h4 Heading\n##### h5 Heading\n###### h6 Heading\n\n\n## Horizontal Rules\n\n___\n\n---\n\n***\n\n\n## Typographic replacements\n\nEnable typographer option to see result.\n\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\n\ntest.. test... test..... test?..... test!....\n\n!!!!!! ???? ,,  -- ---\n\n\"Smartypants, double quotes\" and \'single quotes\'\n\n\n## Emphasis\n\n**This is bold text**\n\n__This is bold text__\n\n*This is italic text*\n\n_This is italic text_\n\n~~Strikethrough~~\n\n\n## Blockquotes\n\n\n> Blockquotes can also be nested...\n>> ...by using additional greater-than signs right next to each other...\n> > > ...or with spaces between arrows.\n\n\n## Lists\n\nUnordered\n\n+ Create a list by starting a line with `+`, `-`, or `*`\n+ Sub-lists are made by indenting 2 spaces:\n  - Marker character change forces new list start:\n    * Ac tristique libero volutpat at\n    + Facilisis in pretium nisl aliquet\n    - Nulla volutpat aliquam velit\n+ Very easy!\n\nOrdered\n\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n\n\n1. You can use sequential numbers...\n1. ...or keep all the numbers as `1.`\n\nStart numbering with offset:\n\n57. foo\n1. bar\n\n\n## Code\n\nInline `code`\n\nIndented code\n\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n\n\nBlock code \"fences\"\n\n```\nSample text here...\n```\n\nSyntax highlighting\n\n``` js\nvar foo = function (bar) {\n  return bar++;\n};\n\nconsole.log(foo(5));\n```\n\n## Tables\n\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\nRight aligned columns\n\n| Option | Description |\n| ------:| -----------:|\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\n\n## Links\n\n[link text](http://dev.nodeca.com)\n\n[link with title](http://nodeca.github.io/pica/demo/ \"title text!\")\n\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\n\n\n## Images\n\n![Minion](https://octodex.github.com/images/minion.png)\n![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\")\n\nLike links, Images also have a footnote style syntax\n\n![Alt text][id]\n\nWith a reference later in the document defining the URL location:\n\n[id]: https://octodex.github.com/images/dojocat.jpg  \"The Dojocat\"\n\n\n## Plugins\n\nThe killer feature of `markdown-it` is very effective support of\n[syntax plugins](https://www.npmjs.org/browse/keyword/markdown-it-plugin).\n\n\n### [Emojies](https://github.com/markdown-it/markdown-it-emoji)\n\n> Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:\n>\n> Shortcuts (emoticons): :-) :-( 8-) ;)\n\nsee [how to change output](https://github.com/markdown-it/markdown-it-emoji#change-output) with twemoji.\n\n\n### [Subscript](https://github.com/markdown-it/markdown-it-sub) / [Superscript](https://github.com/markdown-it/markdown-it-sup)\n\n- 19^th^\n- H~2~O\n\n\n### [\\<ins>](https://github.com/markdown-it/markdown-it-ins)\n\n++Inserted text++\n\n\n### [\\<mark>](https://github.com/markdown-it/markdown-it-mark)\n\n==Marked text==\n\n\n### [Footnotes](https://github.com/markdown-it/markdown-it-footnote)\n\nFootnote 1 link[^first].\n\nFootnote 2 link[^second].\n\nInline footnote^[Text of inline footnote] definition.\n\nDuplicated footnote reference[^second].\n\n[^first]: Footnote **can have markup**\n\n    and multiple paragraphs.\n\n[^second]: Footnote text.\n\n\n### [Definition lists](https://github.com/markdown-it/markdown-it-deflist)\n\nTerm 1\n\n:   Definition 1\nwith lazy continuation.\n\nTerm 2 with *inline markup*\n\n:   Definition 2\n\n        { some code, part of Definition 2 }\n\n    Third paragraph of definition 2.\n\n_Compact style:_\n\nTerm 1\n  ~ Definition 1\n\nTerm 2\n  ~ Definition 2a\n  ~ Definition 2b\n\n\n### [Abbreviations](https://github.com/markdown-it/markdown-it-abbr)\n\nThis is HTML abbreviation example.\n\nIt converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.\n\n*[HTML]: Hyper Text Markup Language\n\n### [Custom containers](https://github.com/markdown-it/markdown-it-container)\n\n::: warning\n*here be dragons*\n:::\n',1599131144,1,',markdown,');
/*!40000 ALTER TABLE `blogs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tags` (
  `tag` varchar(255) NOT NULL,
  `title` varchar(255) DEFAULT NULL,
  `description` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`tag`),
  UNIQUE KEY `tag_UNIQUE` (`tag`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES ('concepts',NULL,NULL),('config',NULL,NULL),('cors',NULL,NULL),('hehe','Ok','Yeah'),('interview',NULL,NULL),('javascript',NULL,NULL),('job',NULL,NULL),('js',NULL,NULL),('markdown',NULL,NULL),('mistakes',NULL,NULL),('optimistic-updates',NULL,NULL),('optimizing',NULL,NULL),('pro',NULL,NULL),('react',NULL,NULL),('react-performance',NULL,NULL),('react-tricks',NULL,NULL),('spa',NULL,NULL),('test','This is just a test ta2g','Yeah'),('test1',NULL,NULL),('test2',NULL,NULL),('thutag',NULL,NULL),('typescript',NULL,NULL),('vscode',NULL,NULL),('vue',NULL,NULL);
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(64) NOT NULL,
  `email` varchar(320) NOT NULL,
  `password` text NOT NULL,
  `role` int DEFAULT '0',
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`),
  UNIQUE KEY `username_UNIQUE` (`username`),
  UNIQUE KEY `email_UNIQUE` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'duyhd','huynhducduy219@gmail.com','$2a$04$956Ot1PIENBe/QT7xnq01uEpo3sgY0emIapoJUm25Ayl55tyUHTg.',0,'Huynh Duc Duy');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping events for database 'sahty'
--

--
-- Dumping routines for database 'sahty'
--
SET @@SESSION.SQL_LOG_BIN = @MYSQLDUMP_TEMP_LOG_BIN;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-09-03 18:57:19
